{"version":3,"sources":["components/score.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","react_default","a","createElement","className","message","currentScore","topScore","Card","onClick","e","card","id","alt","src","value","App","state","cards","_this","shuffle","Cards","justReset","_this2","this","components_score","map","src_components_card","key","cardOnClick","bind","find","item","selected","resetGame","setState","console","log","resetCards","forEach","shuffledCards","_loop","index","Math","floor","random","length","push","filter","i","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAceA,SAXH,SAACC,GAET,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAAf,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BJ,EAAMK,SACpDJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAAf,WAAsDJ,EAAMM,aAA5D,MAA6EN,EAAMO,aCEhFC,SARJ,SAACR,GAAD,OACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,QAAU,SAAAC,GAAC,OAAIV,EAAMS,QAAQT,EAAMW,KAAKC,MAC9DX,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMW,KAAKE,IAAKC,IAAKd,EAAMW,KAAKI,mBCgFvCC,6MA/EdC,MAAQ,CACPX,aAAc,EACdC,SAAU,EACVF,QAAS,GACTa,MAAOC,EAAKC,QAAQC,GACpBC,WAAW,2EAIZ,IAAAC,EAAAC,KACC,OACCvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAACsB,EAAD,CAAOnB,aAAckB,KAAKP,MAAMX,aAAcC,SAAUiB,KAAKP,MAAMV,SAAUF,QAASmB,KAAKP,MAAMZ,UACjGJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAWoB,KAAKP,MAAMK,UAAY,uBAAyB,OAC9DE,KAAKP,MAAMC,MAAMQ,IAAI,SAACf,GAAD,OAAUV,EAAAC,EAAAC,cAACwB,EAAD,CAAMC,IAAKjB,EAAKC,GAAID,KAAMA,EAAMF,QAASc,EAAKM,YAAYC,KAAKP,+CAQzFX,GAEX,IAAID,EAAOa,KAAKP,MAAMC,MAAMa,KAAK,SAACC,GAAD,OAAUA,EAAKpB,KAAOA,IACvD,GAAGD,EAAKsB,SAAU,OAAOT,KAAKU,YAE9BvB,EAAKsB,UAAW,EAChB,IAAI3B,EAAekB,KAAKP,MAAMX,aAAe,EACzCC,EAAWiB,KAAKP,MAAMV,SAAWD,EAAeA,EAAekB,KAAKP,MAAMV,SAE9EiB,KAAKW,SAAS,CACbjB,MAAOM,KAAKJ,QAAQI,KAAKP,MAAMC,OAC/BZ,aAAcA,EACdD,QAAS,gCACTE,SAAUA,EACVe,WAAW,wCAMZc,QAAQC,IAAI,aACZb,KAAKW,SAAS,CACb7B,aAAc,EACdD,QAAS,yBACTa,MAAOM,KAAKc,WAAWd,KAAKP,MAAMC,OAClCI,WAAW,IAGZc,QAAQC,yCAGEnB,GAMV,OAJAkB,QAAQC,IAAI,cACZnB,EAAMqB,QAAQ,SAAA5B,GACbA,EAAKsB,UAAW,IAEVT,KAAKJ,QAAQF,mCAGbA,GAIP,IAFA,IAAIsB,EAAgB,GADrBC,EAAA,WAKE,IAAMC,EAAQC,KAAKC,MAAOD,KAAKE,SAAW3B,EAAM4B,QAChDN,EAAcO,KAAK7B,EAAMwB,IACzBxB,EAAQA,EAAM8B,OAAO,SAACtC,EAAGuC,GAAJ,OAAUA,IAAMP,KAJhCxB,EAAM4B,OAAS,GACrBL,IAMA,OAAOD,SA7ESU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4b0f42f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./score.css\";\r\n\r\nvar Score = (props) => \r\n{\r\n    return (\r\n        <header className=\"row\">\r\n            <div className=\"col-12 col-sm-4 text-center\">Example Title</div>\r\n            <div className=\"col-12 col-sm-4 text-center\">{props.message}</div>\r\n            <div className=\"col-12 col-sm-4 text-center\">Example {props.currentScore} / {props.topScore}</div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nvar Card = (props) => (\r\n    <div className=\"col-6 col-sm-4 col-lg-3 text-center\">\r\n        <div className=\"card-box\" onClick={ e => props.onClick(props.card.id)}>\r\n            <img alt={props.card.alt} src={props.card.value} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Score from './components/score';\r\nimport Card from './components/card';\r\nimport Cards from './Cards.json';\r\n\r\nclass App extends Component \r\n{\r\n\tstate = {\r\n\t\tcurrentScore: 0,\r\n\t\ttopScore: 4,\r\n\t\tmessage: \"\",\r\n\t\tcards: this.shuffle(Cards),\r\n\t\tjustReset: false\r\n\t}\r\n\r\n  \trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div className=\"container-fluid\">\r\n\t\t\t\t<Score currentScore={this.state.currentScore} topScore={this.state.topScore} message={this.state.message} />\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-12 col-sm-10 col-md-8 offset-sm-1 offset-md-2\">\r\n\t\t\t\t\t\t<div className={this.state.justReset ? \"row shake-horizontal\" : \"row\"}>\r\n\t\t\t\t\t\t\t{this.state.cards.map((card) => <Card key={card.id} card={card} onClick={this.cardOnClick.bind(this)} />)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tcardOnClick(id) \r\n\t{\r\n\t\tlet card = this.state.cards.find((item) => item.id === id);\r\n\t\tif(card.selected) return this.resetGame();\r\n\t\t\r\n\t\tcard.selected = true;\r\n\t\tlet currentScore = this.state.currentScore + 1;\r\n\t\tlet topScore = this.state.topScore < currentScore ? currentScore : this.state.topScore;\r\n\t\t\r\n\t\tthis.setState({ \r\n\t\t\tcards: this.shuffle(this.state.cards),\r\n\t\t\tcurrentScore: currentScore,\r\n\t\t\tmessage: \"Great guess keep it going !!!\",\r\n\t\t\ttopScore: topScore,\r\n\t\t\tjustReset: false\r\n\t\t});\r\n\t}\r\n\r\n\tresetGame()\r\n\t{\r\n\t\tconsole.log(\"resetGame\");\r\n\t\tthis.setState({\r\n\t\t\tcurrentScore: 0,\r\n\t\t\tmessage: \"Sorry already clicked.\",\r\n\t\t\tcards: this.resetCards(this.state.cards),\r\n\t\t\tjustReset: true\r\n\t\t});\r\n\t\t\r\n\t\tconsole.log();\r\n\t}\r\n\r\n\tresetCards(cards)\r\n\t{\r\n\t\tconsole.log(\"resetCards\");\r\n\t\tcards.forEach(card  => {\r\n\t\t\tcard.selected = false;\r\n\t\t});\r\n\t\treturn this.shuffle(cards);\r\n\t}\r\n\r\n\tshuffle(cards)\r\n\t{\r\n\t\tlet shuffledCards = [];\r\n\r\n\t\twhile(cards.length > 0)\r\n\t\t{\r\n\t\t\tconst index = Math.floor((Math.random() * cards.length));\r\n\t\t\tshuffledCards.push(cards[index]);\r\n\t\t\tcards = cards.filter((e, i) => i !== index);\r\n\t\t}\r\n\r\n\t\treturn shuffledCards;\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}